{"ast":null,"code":"var _jsxFileName = \"/Users/dinithalakminwickramasinghe/Development Files/FYP-Paddy-Disease-Treatment-Rover/realtime-object-detection-main/react_frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function LiveStream() {\n//   const [detectionResults, setDetectionResults] = useState({});\n//   const [dateTime, setDateTime] = useState(new Date());\n//   const [location, setLocation] = useState({ lat: null, lon: null });\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       console.log(\"Attempting to fetch detection results...\");\n//       fetch('http://localhost:5001/detection_results')\n//         .then(response => {\n//           console.log(\"Response received:\", response);\n//           if (!response.ok) {\n//             throw new Error(`HTTP error! Status: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then(data => {\n//           console.log(\"Fetched detection results:\", data);\n//           setDetectionResults(data); \n//         })\n//         .catch(error => console.error('Error fetching detection results:', error));\n\n//       setDateTime(new Date());\n//     }, 1000); \n\n//     // Get location\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLocation({\n//         lat: position.coords.latitude.toFixed(4),\n//         lon: position.coords.longitude.toFixed(4)\n//       });\n//     });\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   return (\n//     <div className=\"live-stream-container\">\n//       <header>\n//         <h1>Real-Time Object Detection</h1>\n//         <div className=\"info-bar\">\n//           <span>{dateTime.toLocaleString()}</span>\n//           {location.lat && location.lon && (\n//             <span> | Lat: {location.lat} Lon: {location.lon}</span>\n//           )}\n//         </div>\n//       </header>\n//       <div className=\"video-container\">\n//         <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n//       </div>\n//       <div className=\"detection-results\">\n//         <h2>Detected Objects:</h2>\n//         {Object.keys(detectionResults).length > 0 ? (\n//           <ul>\n//             {Object.entries(detectionResults).map(([label, count], index) => (\n//               <li key={index}>{count} {label}</li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No objects detected</p>\n//         )}\n//       </div>\n//       <footer>\n//         Developed by Dinitha Wickramasinghe\n//       </footer>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <LiveStream />\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveStream() {\n  _s();\n  const [detectionResults, setDetectionResults] = useState([]);\n  const [dateTime, setDateTime] = useState(new Date());\n  const [location, setLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(\"Attempting to fetch detection results...\");\n      fetch('http://localhost:5001/detection_results').then(response => {\n        console.log(\"Response received:\", response);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        console.log(\"Fetched detection results:\", data);\n        // Handle both the new and old response formats\n        if (data.status === 'success' && Array.isArray(data.data)) {\n          setDetectionResults(data.data);\n        } else {\n          // Convert old format to new format if needed\n          const formattedResults = Object.entries(data).map(([label, count]) => {\n            // Extract disease name and confidence if in the format \"disease (avg score: 0.xx)\"\n            const match = label.match(/(.*) \\(avg score: ([\\d.]+)\\)/);\n            if (match) {\n              return {\n                name: match[1].trim(),\n                count: count,\n                accuracy: parseFloat(match[2]) * 100,\n                // Convert to percentage\n                color: getColorForDisease(match[1].trim())\n              };\n            } else {\n              return {\n                name: label,\n                count: count,\n                accuracy: 0,\n                color: getColorForDisease(label)\n              };\n            }\n          });\n          setDetectionResults(formattedResults);\n        }\n        setLoading(false);\n      }).catch(error => {\n        console.error('Error fetching detection results:', error);\n        setError(error.message);\n        setLoading(false);\n      });\n      setDateTime(new Date());\n    }, 1000);\n\n    // Get location\n    navigator.geolocation.getCurrentPosition(position => {\n      setLocation({\n        lat: position.coords.latitude.toFixed(4),\n        lon: position.coords.longitude.toFixed(4)\n      });\n    });\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Function to get color for disease (fallback for old backend format)\n  const getColorForDisease = diseaseName => {\n    const colorMap = {\n      'bacterial_leaf_blight': [255, 0, 0],\n      'brown_spot': [165, 42, 42],\n      'healthy': [0, 255, 0],\n      'leaf_blast': [128, 0, 128],\n      'leaf_scald': [255, 165, 0],\n      'narrow_brown_spot': [210, 105, 30],\n      'neck_blast': [0, 0, 255],\n      'rice_hispa': [255, 20, 147],\n      'sheath_blight': [139, 69, 19],\n      'tungro': [255, 255, 0]\n    };\n    return colorMap[diseaseName] || [0, 128, 0]; // Default to green\n  };\n\n  // Convert RGB array to CSS color string\n  const rgbToCSS = rgbArray => {\n    return `rgb(${rgbArray[0]}, ${rgbArray[1]}, ${rgbArray[2]})`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"live-stream-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Rice Leaf Disease Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: dateTime.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), location.lat && location.lon && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" | Lat: \", location.lat, \" Lon: \", location.lon]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:5001/video_feed\",\n          alt: \"Live Stream\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detection-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Detected Diseases:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading detection results...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-hint\",\n            children: \"Make sure your backend server is running and accessible.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this) : detectionResults.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-detection-message\",\n          children: \"No diseases detected. Point camera at rice plants.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-container\",\n          children: detectionResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"disease-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"disease-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"disease-name\",\n                style: {\n                  color: rgbToCSS(result.color)\n                },\n                children: result.name.replace(/_/g, ' ').toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"disease-count\",\n                children: [\"Count: \", result.count]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"accuracy-bar-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accuracy-bar\",\n                style: {\n                  width: `${result.accuracy}%`,\n                  backgroundColor: rgbToCSS(result.color)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"accuracy-text\",\n                children: [result.accuracy.toFixed(2), \"% confidence\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"Developed by Dinitha Wickramasinghe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveStream, \"QBV33y9xL0z8PRkL4mEBPxuMRCY=\");\n_c = LiveStream;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(LiveStream, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"LiveStream\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LiveStream","_s","detectionResults","setDetectionResults","dateTime","setDateTime","Date","location","setLocation","lat","lon","loading","setLoading","error","setError","intervalId","setInterval","console","log","fetch","then","response","ok","Error","status","json","data","Array","isArray","formattedResults","Object","entries","map","label","count","match","name","trim","accuracy","parseFloat","color","getColorForDisease","catch","message","navigator","geolocation","getCurrentPosition","position","coords","latitude","toFixed","longitude","clearInterval","diseaseName","colorMap","rgbToCSS","rgbArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","src","alt","length","result","index","style","replace","toUpperCase","width","backgroundColor","_c","App","_c2","$RefreshReg$"],"sources":["/Users/dinithalakminwickramasinghe/Development Files/FYP-Paddy-Disease-Treatment-Rover/realtime-object-detection-main/react_frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function LiveStream() {\n//   const [detectionResults, setDetectionResults] = useState({});\n//   const [dateTime, setDateTime] = useState(new Date());\n//   const [location, setLocation] = useState({ lat: null, lon: null });\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       console.log(\"Attempting to fetch detection results...\");\n//       fetch('http://localhost:5001/detection_results')\n//         .then(response => {\n//           console.log(\"Response received:\", response);\n//           if (!response.ok) {\n//             throw new Error(`HTTP error! Status: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then(data => {\n//           console.log(\"Fetched detection results:\", data);\n//           setDetectionResults(data); \n//         })\n//         .catch(error => console.error('Error fetching detection results:', error));\n\n//       setDateTime(new Date());\n//     }, 1000); \n\n//     // Get location\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLocation({\n//         lat: position.coords.latitude.toFixed(4),\n//         lon: position.coords.longitude.toFixed(4)\n//       });\n//     });\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   return (\n//     <div className=\"live-stream-container\">\n//       <header>\n//         <h1>Real-Time Object Detection</h1>\n//         <div className=\"info-bar\">\n//           <span>{dateTime.toLocaleString()}</span>\n//           {location.lat && location.lon && (\n//             <span> | Lat: {location.lat} Lon: {location.lon}</span>\n//           )}\n//         </div>\n//       </header>\n//       <div className=\"video-container\">\n//         <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n//       </div>\n//       <div className=\"detection-results\">\n//         <h2>Detected Objects:</h2>\n//         {Object.keys(detectionResults).length > 0 ? (\n//           <ul>\n//             {Object.entries(detectionResults).map(([label, count], index) => (\n//               <li key={index}>{count} {label}</li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No objects detected</p>\n//         )}\n//       </div>\n//       <footer>\n//         Developed by Dinitha Wickramasinghe\n//       </footer>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <LiveStream />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction LiveStream() {\n  const [detectionResults, setDetectionResults] = useState([]);\n  const [dateTime, setDateTime] = useState(new Date());\n  const [location, setLocation] = useState({ lat: null, lon: null });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(\"Attempting to fetch detection results...\");\n      fetch('http://localhost:5001/detection_results')\n        .then(response => {\n          console.log(\"Response received:\", response);\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return response.json();\n        })\n        .then(data => {\n          console.log(\"Fetched detection results:\", data);\n          // Handle both the new and old response formats\n          if (data.status === 'success' && Array.isArray(data.data)) {\n            setDetectionResults(data.data);\n          } else {\n            // Convert old format to new format if needed\n            const formattedResults = Object.entries(data).map(([label, count]) => {\n              // Extract disease name and confidence if in the format \"disease (avg score: 0.xx)\"\n              const match = label.match(/(.*) \\(avg score: ([\\d.]+)\\)/);\n              if (match) {\n                return {\n                  name: match[1].trim(),\n                  count: count,\n                  accuracy: parseFloat(match[2]) * 100, // Convert to percentage\n                  color: getColorForDisease(match[1].trim())\n                };\n              } else {\n                return {\n                  name: label,\n                  count: count,\n                  accuracy: 0,\n                  color: getColorForDisease(label)\n                };\n              }\n            });\n            setDetectionResults(formattedResults);\n          }\n          setLoading(false);\n        })\n        .catch(error => {\n          console.error('Error fetching detection results:', error);\n          setError(error.message);\n          setLoading(false);\n        });\n\n      setDateTime(new Date());\n    }, 1000); \n\n    // Get location\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLocation({\n        lat: position.coords.latitude.toFixed(4),\n        lon: position.coords.longitude.toFixed(4)\n      });\n    });\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Function to get color for disease (fallback for old backend format)\n  const getColorForDisease = (diseaseName) => {\n    const colorMap = {\n      'bacterial_leaf_blight': [255, 0, 0],\n      'brown_spot': [165, 42, 42],\n      'healthy': [0, 255, 0],\n      'leaf_blast': [128, 0, 128],\n      'leaf_scald': [255, 165, 0],\n      'narrow_brown_spot': [210, 105, 30],\n      'neck_blast': [0, 0, 255],\n      'rice_hispa': [255, 20, 147],\n      'sheath_blight': [139, 69, 19],\n      'tungro': [255, 255, 0]\n    };\n    \n    return colorMap[diseaseName] || [0, 128, 0]; // Default to green\n  };\n\n  // Convert RGB array to CSS color string\n  const rgbToCSS = (rgbArray) => {\n    return `rgb(${rgbArray[0]}, ${rgbArray[1]}, ${rgbArray[2]})`;\n  };\n\n  return (\n    <div className=\"live-stream-container\">\n      <header>\n        <h1>Rice Leaf Disease Detection</h1>\n        <div className=\"info-bar\">\n          <span>{dateTime.toLocaleString()}</span>\n          {location.lat && location.lon && (\n            <span> | Lat: {location.lat} Lon: {location.lon}</span>\n          )}\n        </div>\n      </header>\n      \n      <div className=\"content-container\">\n        <div className=\"video-container\">\n          <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n        </div>\n        \n        <div className=\"detection-results\">\n          <h2>Detected Diseases:</h2>\n          \n          {loading ? (\n            <div className=\"loading-message\">\n              <p>Loading detection results...</p>\n            </div>\n          ) : error ? (\n            <div className=\"error-message\">\n              <p>Error: {error}</p>\n              <p className=\"error-hint\">Make sure your backend server is running and accessible.</p>\n            </div>\n          ) : detectionResults.length === 0 ? (\n            <p className=\"no-detection-message\">No diseases detected. Point camera at rice plants.</p>\n          ) : (\n            <div className=\"results-container\">\n              {detectionResults.map((result, index) => (\n                <div key={index} className=\"disease-item\">\n                  <div className=\"disease-header\">\n                    <h3 className=\"disease-name\" style={{ color: rgbToCSS(result.color) }}>\n                      {result.name.replace(/_/g, ' ').toUpperCase()}\n                    </h3>\n                    <span className=\"disease-count\">\n                      Count: {result.count}\n                    </span>\n                  </div>\n                  \n                  <div className=\"accuracy-bar-container\">\n                    <div \n                      className=\"accuracy-bar\"\n                      style={{ \n                        width: `${result.accuracy}%`,\n                        backgroundColor: rgbToCSS(result.color)\n                      }}\n                    ></div>\n                    <span className=\"accuracy-text\">\n                      {result.accuracy.toFixed(2)}% confidence\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <footer>\n        Developed by Dinitha Wickramasinghe\n      </footer>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LiveStream />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}