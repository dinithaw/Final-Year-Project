{"ast":null,"code":"var _jsxFileName = \"/Users/dinithalakminwickramasinghe/Development Files/FYP-Paddy-Disease-Treatment-Rover/realtime-object-detection-main/react_frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function LiveStream() {\n//   const [detectionResults, setDetectionResults] = useState({});\n//   const [dateTime, setDateTime] = useState(new Date());\n//   const [location, setLocation] = useState({ lat: null, lon: null });\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       console.log(\"Attempting to fetch detection results...\");\n//       fetch('http://localhost:5001/detection_results')\n//         .then(response => {\n//           console.log(\"Response received:\", response);\n//           if (!response.ok) {\n//             throw new Error(`HTTP error! Status: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then(data => {\n//           console.log(\"Fetched detection results:\", data);\n//           setDetectionResults(data); \n//         })\n//         .catch(error => console.error('Error fetching detection results:', error));\n\n//       setDateTime(new Date());\n//     }, 1000); \n\n//     // Get location\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLocation({\n//         lat: position.coords.latitude.toFixed(4),\n//         lon: position.coords.longitude.toFixed(4)\n//       });\n//     });\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   return (\n//     <div className=\"live-stream-container\">\n//       <header>\n//         <h1>Real-Time Object Detection</h1>\n//         <div className=\"info-bar\">\n//           <span>{dateTime.toLocaleString()}</span>\n//           {location.lat && location.lon && (\n//             <span> | Lat: {location.lat} Lon: {location.lon}</span>\n//           )}\n//         </div>\n//       </header>\n//       <div className=\"video-container\">\n//         <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n//       </div>\n//       <div className=\"detection-results\">\n//         <h2>Detected Objects:</h2>\n//         {Object.keys(detectionResults).length > 0 ? (\n//           <ul>\n//             {Object.entries(detectionResults).map(([label, count], index) => (\n//               <li key={index}>{count} {label}</li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No objects detected</p>\n//         )}\n//       </div>\n//       <footer>\n//         Developed by Dinitha Wickramasinghe\n//       </footer>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <LiveStream />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//v2\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function LiveStream() {\n//   const [detectionResults, setDetectionResults] = useState([]);\n//   const [dateTime, setDateTime] = useState(new Date());\n//   const [location, setLocation] = useState({ lat: null, lon: null });\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       console.log(\"Attempting to fetch detection results...\");\n//       fetch('http://localhost:5001/detection_results')\n//         .then(response => {\n//           console.log(\"Response received:\", response);\n//           if (!response.ok) {\n//             throw new Error(`HTTP error! Status: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then(data => {\n//           console.log(\"Fetched detection results:\", data);\n//           // Handle both the new and old response formats\n//           if (data.status === 'success' && Array.isArray(data.data)) {\n//             setDetectionResults(data.data);\n//           } else {\n//             // Convert old format to new format if needed\n//             const formattedResults = Object.entries(data).map(([label, count]) => {\n//               // Extract disease name and confidence if in the format \"disease (avg score: 0.xx)\"\n//               const match = label.match(/(.*) \\(avg score: ([\\d.]+)\\)/);\n//               if (match) {\n//                 return {\n//                   name: match[1].trim(),\n//                   count: count,\n//                   accuracy: parseFloat(match[2]) * 100, // Convert to percentage\n//                   color: getColorForDisease(match[1].trim())\n//                 };\n//               } else {\n//                 return {\n//                   name: label,\n//                   count: count,\n//                   accuracy: 0,\n//                   color: getColorForDisease(label)\n//                 };\n//               }\n//             });\n//             setDetectionResults(formattedResults);\n//           }\n//           setLoading(false);\n//         })\n//         .catch(error => {\n//           console.error('Error fetching detection results:', error);\n//           setError(error.message);\n//           setLoading(false);\n//         });\n\n//       setDateTime(new Date());\n//     }, 1000); \n\n//     // Get location\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLocation({\n//         lat: position.coords.latitude.toFixed(4),\n//         lon: position.coords.longitude.toFixed(4)\n//       });\n//     });\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   // Function to get color for disease (fallback for old backend format)\n//   const getColorForDisease = (diseaseName) => {\n//     const colorMap = {\n//       'bacterial_leaf_blight': [255, 0, 0],\n//       'brown_spot': [165, 42, 42],\n//       'healthy': [0, 255, 0],\n//       'leaf_blast': [128, 0, 128],\n//       'leaf_scald': [255, 165, 0],\n//       'narrow_brown_spot': [210, 105, 30],\n//       'neck_blast': [0, 0, 255],\n//       'rice_hispa': [255, 20, 147],\n//       'sheath_blight': [139, 69, 19],\n//       'tungro': [255, 255, 0]\n//     };\n\n//     return colorMap[diseaseName] || [0, 128, 0]; // Default to green\n//   };\n\n//   // Convert RGB array to CSS color string\n//   const rgbToCSS = (rgbArray) => {\n//     return `rgb(${rgbArray[0]}, ${rgbArray[1]}, ${rgbArray[2]})`;\n//   };\n\n//   return (\n//     <div className=\"live-stream-container\">\n//       <header>\n//         <h1>Rice Leaf Disease Detection</h1>\n//         <div className=\"info-bar\">\n//           <span>{dateTime.toLocaleString()}</span>\n//           {location.lat && location.lon && (\n//             <span> | Lat: {location.lat} Lon: {location.lon}</span>\n//           )}\n//         </div>\n//       </header>\n\n//       <div className=\"content-container\">\n//         <div className=\"video-container\">\n//           <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n//         </div>\n\n//         <div className=\"detection-results\">\n//           <h2>Detected Diseases:</h2>\n\n//           {loading ? (\n//             <div className=\"loading-message\">\n//               <p>Loading detection results...</p>\n//             </div>\n//           ) : error ? (\n//             <div className=\"error-message\">\n//               <p>Error: {error}</p>\n//               <p className=\"error-hint\">Make sure your backend server is running and accessible.</p>\n//             </div>\n//           ) : detectionResults.length === 0 ? (\n//             <p className=\"no-detection-message\">No diseases detected. Point camera at rice plants.</p>\n//           ) : (\n//             <div className=\"results-container\">\n//               {detectionResults.map((result, index) => (\n//                 <div key={index} className=\"disease-item\">\n//                   <div className=\"disease-header\">\n//                     <h3 className=\"disease-name\" style={{ color: rgbToCSS(result.color) }}>\n//                       {result.name.replace(/_/g, ' ').toUpperCase()}\n//                     </h3>\n//                     <span className=\"disease-count\">\n//                       Count: {result.count}\n//                     </span>\n//                   </div>\n\n//                   <div className=\"accuracy-bar-container\">\n//                     <div \n//                       className=\"accuracy-bar\"\n//                       style={{ \n//                         width: `${result.accuracy}%`,\n//                         backgroundColor: rgbToCSS(result.color)\n//                       }}\n//                     ></div>\n//                     <span className=\"accuracy-text\">\n//                       {result.accuracy.toFixed(2)}% confidence\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       <footer>\n//         Developed by Dinitha Wickramasinghe\n//       </footer>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <LiveStream />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//v3\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveStream() {\n  _s();\n  const [detectionResults, setDetectionResults] = useState([]);\n  const [dateTime, setDateTime] = useState(new Date());\n  const [location, setLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      fetch('http://localhost:5001/detection_results').then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        // Handle both new and old data formats\n        if (data.status === 'success' && Array.isArray(data.data)) {\n          setDetectionResults(data.data);\n        } else {\n          // Convert old format to new format\n          const formattedResults = Object.entries(data).map(([label, count]) => {\n            const match = label.match(/(.*) \\(avg score: ([\\d.]+)\\)/);\n            if (match) {\n              return {\n                name: match[1].trim(),\n                count: count,\n                accuracy: parseFloat(match[2]) * 100\n              };\n            } else {\n              return {\n                name: label,\n                count: count,\n                accuracy: 0\n              };\n            }\n          });\n          setDetectionResults(formattedResults);\n        }\n      }).catch(error => console.error('Error fetching detection results:', error));\n      setDateTime(new Date());\n    }, 1000);\n\n    // Get location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLocation({\n          lat: position.coords.latitude.toFixed(4),\n          lon: position.coords.longitude.toFixed(4)\n        });\n      }, error => {\n        console.error(\"Geolocation error:\", error);\n      });\n    }\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"live-stream-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Rice Disease Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: dateTime.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), location.lat && location.lon && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" | Lat: \", location.lat, \" Lon: \", location.lon]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-section\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://localhost:5001/video_feed\",\n          alt: \"Live Stream\",\n          className: \"video-feed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Detection Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), detectionResults.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-results\",\n          children: \"No diseases detected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-list\",\n          children: detectionResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-name\",\n              children: result.name.replace(/_/g, ' ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"count-badge\",\n                children: result.count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"accuracy-display\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"accuracy-bar\",\n                  style: {\n                    width: `${result.accuracy}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"accuracy-label\",\n                  children: [result.accuracy.toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"Developed by Dinitha Wickramasinghe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveStream, \"wRIlH/Z4/VXwfa8SzpxBEmmLyg4=\");\n_c = LiveStream;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(LiveStream, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"LiveStream\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LiveStream","_s","detectionResults","setDetectionResults","dateTime","setDateTime","Date","location","setLocation","lat","lon","intervalId","setInterval","fetch","then","response","ok","Error","status","json","data","Array","isArray","formattedResults","Object","entries","map","label","count","match","name","trim","accuracy","parseFloat","catch","error","console","navigator","geolocation","getCurrentPosition","position","coords","latitude","toFixed","longitude","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","src","alt","length","result","index","replace","style","width","_c","App","_c2","$RefreshReg$"],"sources":["/Users/dinithalakminwickramasinghe/Development Files/FYP-Paddy-Disease-Treatment-Rover/realtime-object-detection-main/react_frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function LiveStream() {\n//   const [detectionResults, setDetectionResults] = useState({});\n//   const [dateTime, setDateTime] = useState(new Date());\n//   const [location, setLocation] = useState({ lat: null, lon: null });\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       console.log(\"Attempting to fetch detection results...\");\n//       fetch('http://localhost:5001/detection_results')\n//         .then(response => {\n//           console.log(\"Response received:\", response);\n//           if (!response.ok) {\n//             throw new Error(`HTTP error! Status: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then(data => {\n//           console.log(\"Fetched detection results:\", data);\n//           setDetectionResults(data); \n//         })\n//         .catch(error => console.error('Error fetching detection results:', error));\n\n//       setDateTime(new Date());\n//     }, 1000); \n\n//     // Get location\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLocation({\n//         lat: position.coords.latitude.toFixed(4),\n//         lon: position.coords.longitude.toFixed(4)\n//       });\n//     });\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   return (\n//     <div className=\"live-stream-container\">\n//       <header>\n//         <h1>Real-Time Object Detection</h1>\n//         <div className=\"info-bar\">\n//           <span>{dateTime.toLocaleString()}</span>\n//           {location.lat && location.lon && (\n//             <span> | Lat: {location.lat} Lon: {location.lon}</span>\n//           )}\n//         </div>\n//       </header>\n//       <div className=\"video-container\">\n//         <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n//       </div>\n//       <div className=\"detection-results\">\n//         <h2>Detected Objects:</h2>\n//         {Object.keys(detectionResults).length > 0 ? (\n//           <ul>\n//             {Object.entries(detectionResults).map(([label, count], index) => (\n//               <li key={index}>{count} {label}</li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No objects detected</p>\n//         )}\n//       </div>\n//       <footer>\n//         Developed by Dinitha Wickramasinghe\n//       </footer>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <LiveStream />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n//v2\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function LiveStream() {\n//   const [detectionResults, setDetectionResults] = useState([]);\n//   const [dateTime, setDateTime] = useState(new Date());\n//   const [location, setLocation] = useState({ lat: null, lon: null });\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const intervalId = setInterval(() => {\n//       console.log(\"Attempting to fetch detection results...\");\n//       fetch('http://localhost:5001/detection_results')\n//         .then(response => {\n//           console.log(\"Response received:\", response);\n//           if (!response.ok) {\n//             throw new Error(`HTTP error! Status: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then(data => {\n//           console.log(\"Fetched detection results:\", data);\n//           // Handle both the new and old response formats\n//           if (data.status === 'success' && Array.isArray(data.data)) {\n//             setDetectionResults(data.data);\n//           } else {\n//             // Convert old format to new format if needed\n//             const formattedResults = Object.entries(data).map(([label, count]) => {\n//               // Extract disease name and confidence if in the format \"disease (avg score: 0.xx)\"\n//               const match = label.match(/(.*) \\(avg score: ([\\d.]+)\\)/);\n//               if (match) {\n//                 return {\n//                   name: match[1].trim(),\n//                   count: count,\n//                   accuracy: parseFloat(match[2]) * 100, // Convert to percentage\n//                   color: getColorForDisease(match[1].trim())\n//                 };\n//               } else {\n//                 return {\n//                   name: label,\n//                   count: count,\n//                   accuracy: 0,\n//                   color: getColorForDisease(label)\n//                 };\n//               }\n//             });\n//             setDetectionResults(formattedResults);\n//           }\n//           setLoading(false);\n//         })\n//         .catch(error => {\n//           console.error('Error fetching detection results:', error);\n//           setError(error.message);\n//           setLoading(false);\n//         });\n\n//       setDateTime(new Date());\n//     }, 1000); \n\n//     // Get location\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLocation({\n//         lat: position.coords.latitude.toFixed(4),\n//         lon: position.coords.longitude.toFixed(4)\n//       });\n//     });\n\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   // Function to get color for disease (fallback for old backend format)\n//   const getColorForDisease = (diseaseName) => {\n//     const colorMap = {\n//       'bacterial_leaf_blight': [255, 0, 0],\n//       'brown_spot': [165, 42, 42],\n//       'healthy': [0, 255, 0],\n//       'leaf_blast': [128, 0, 128],\n//       'leaf_scald': [255, 165, 0],\n//       'narrow_brown_spot': [210, 105, 30],\n//       'neck_blast': [0, 0, 255],\n//       'rice_hispa': [255, 20, 147],\n//       'sheath_blight': [139, 69, 19],\n//       'tungro': [255, 255, 0]\n//     };\n    \n//     return colorMap[diseaseName] || [0, 128, 0]; // Default to green\n//   };\n\n//   // Convert RGB array to CSS color string\n//   const rgbToCSS = (rgbArray) => {\n//     return `rgb(${rgbArray[0]}, ${rgbArray[1]}, ${rgbArray[2]})`;\n//   };\n\n//   return (\n//     <div className=\"live-stream-container\">\n//       <header>\n//         <h1>Rice Leaf Disease Detection</h1>\n//         <div className=\"info-bar\">\n//           <span>{dateTime.toLocaleString()}</span>\n//           {location.lat && location.lon && (\n//             <span> | Lat: {location.lat} Lon: {location.lon}</span>\n//           )}\n//         </div>\n//       </header>\n      \n//       <div className=\"content-container\">\n//         <div className=\"video-container\">\n//           <img src=\"http://localhost:5001/video_feed\" alt=\"Live Stream\" />\n//         </div>\n        \n//         <div className=\"detection-results\">\n//           <h2>Detected Diseases:</h2>\n          \n//           {loading ? (\n//             <div className=\"loading-message\">\n//               <p>Loading detection results...</p>\n//             </div>\n//           ) : error ? (\n//             <div className=\"error-message\">\n//               <p>Error: {error}</p>\n//               <p className=\"error-hint\">Make sure your backend server is running and accessible.</p>\n//             </div>\n//           ) : detectionResults.length === 0 ? (\n//             <p className=\"no-detection-message\">No diseases detected. Point camera at rice plants.</p>\n//           ) : (\n//             <div className=\"results-container\">\n//               {detectionResults.map((result, index) => (\n//                 <div key={index} className=\"disease-item\">\n//                   <div className=\"disease-header\">\n//                     <h3 className=\"disease-name\" style={{ color: rgbToCSS(result.color) }}>\n//                       {result.name.replace(/_/g, ' ').toUpperCase()}\n//                     </h3>\n//                     <span className=\"disease-count\">\n//                       Count: {result.count}\n//                     </span>\n//                   </div>\n                  \n//                   <div className=\"accuracy-bar-container\">\n//                     <div \n//                       className=\"accuracy-bar\"\n//                       style={{ \n//                         width: `${result.accuracy}%`,\n//                         backgroundColor: rgbToCSS(result.color)\n//                       }}\n//                     ></div>\n//                     <span className=\"accuracy-text\">\n//                       {result.accuracy.toFixed(2)}% confidence\n//                     </span>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </div>\n//       </div>\n      \n//       <footer>\n//         Developed by Dinitha Wickramasinghe\n//       </footer>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <LiveStream />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n//v3\n\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction LiveStream() {\n  const [detectionResults, setDetectionResults] = useState([]);\n  const [dateTime, setDateTime] = useState(new Date());\n  const [location, setLocation] = useState({ lat: null, lon: null });\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      fetch('http://localhost:5001/detection_results')\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return response.json();\n        })\n        .then(data => {\n          // Handle both new and old data formats\n          if (data.status === 'success' && Array.isArray(data.data)) {\n            setDetectionResults(data.data);\n          } else {\n            // Convert old format to new format\n            const formattedResults = Object.entries(data).map(([label, count]) => {\n              const match = label.match(/(.*) \\(avg score: ([\\d.]+)\\)/);\n              if (match) {\n                return {\n                  name: match[1].trim(),\n                  count: count,\n                  accuracy: parseFloat(match[2]) * 100\n                };\n              } else {\n                return {\n                  name: label,\n                  count: count,\n                  accuracy: 0\n                };\n              }\n            });\n            setDetectionResults(formattedResults);\n          }\n        })\n        .catch(error => console.error('Error fetching detection results:', error));\n\n      setDateTime(new Date());\n    }, 1000);\n\n    // Get location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLocation({\n            lat: position.coords.latitude.toFixed(4),\n            lon: position.coords.longitude.toFixed(4)\n          });\n        },\n        (error) => {\n          console.error(\"Geolocation error:\", error);\n        }\n      );\n    }\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <div className=\"live-stream-container\">\n      <header>\n        <h1>Rice Disease Detection</h1>\n        <div className=\"info-bar\">\n          <span>{dateTime.toLocaleString()}</span>\n          {location.lat && location.lon && (\n            <span> | Lat: {location.lat} Lon: {location.lon}</span>\n          )}\n        </div>\n      </header>\n\n      <div className=\"main-content\">\n        <div className=\"video-section\">\n          <img \n            src=\"http://localhost:5001/video_feed\" \n            alt=\"Live Stream\" \n            className=\"video-feed\"\n          />\n        </div>\n\n        <div className=\"results-section\">\n          <h2>Detection Results</h2>\n          {detectionResults.length === 0 ? (\n            <div className=\"no-results\">\n              No diseases detected\n            </div>\n          ) : (\n            <div className=\"results-list\">\n              {detectionResults.map((result, index) => (\n                <div key={index} className=\"result-item\">\n                  <div className=\"result-name\">\n                    {result.name.replace(/_/g, ' ')}\n                  </div>\n                  <div className=\"result-details\">\n                    <div className=\"count-badge\">\n                      {result.count}\n                    </div>\n                    <div className=\"accuracy-display\">\n                      <div \n                        className=\"accuracy-bar\"\n                        style={{ width: `${result.accuracy}%` }}\n                      ></div>\n                      <div className=\"accuracy-label\">\n                        {result.accuracy.toFixed(1)}%\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <footer>\n        Developed by Dinitha Wickramasinghe\n      </footer>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LiveStream />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA,OAAOA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}